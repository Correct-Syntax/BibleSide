# Script to automatically generate dart files mapping the OET-RV sections from the OET json files
# Requirements: Python 3 and the standard library

# The resulting oet_rv_section_headings.dart file is formatted like so:
#
# Map<String, List<List<String>>> sectionHeadingsMappingForOET = {
#   'JHN': [
#     [
#       '1:1 First section',
#     ],
#     [
#       '1:21 Second section',
#     ],
#   ],
# };

# The resulting oet_rv_section_start_end.dart file is formatted like so:
# 
# Map<String, Map<String, Map<String, Map<String, int>>>> sectionStartEndMappingForOET = {
#   'JHN': {
#     '1:1': {
#       'begin' : {
#         'chapter': 1,
#         'verse': 1,
#       },
#       'end': {
#         'chapter': 1,
#         'verse': 2,
#       }
#     }
#   }
# }


import os
import re
import json

RV_local_path = "./OET-RV/"
oet_rv_section_headings_file = "../../lib/common/oet_rv_section_headings.dart"
oet_rv_section_start_end_file = "../../lib/common/oet_rv_section_start_end.dart"

section_headings_dart_file_template = """
// GENERATED FILE. DO NOT EDIT DIRECTLY
// This file can be regenerated by running the update_OET_sections.py file

Map<String, List<List<String>>> sectionHeadingsMappingForOET = {};
"""

section_start_end_dart_file_template = """
// GENERATED FILE. DO NOT EDIT DIRECTLY
// This file can be regenerated by running the update_OET_sections.py file

Map<String, Map<String, Map<String, Map<String, int>>>> sectionStartEndMappingForOET = {};
"""


# TODO: fix sections offset
# shift after verse 1 (see Mark chapter 1)
# offset = 1
def generate_headings_mappings_file():
  file_list = os.listdir(RV_local_path)

  sections_mapping = {}

  for file in file_list:
    chapter_sections_list = []
    book_code = file.split('.')[0]
    data = read_json_file(f'{RV_local_path}{file}')

    for chapter in data['chapters']:
      sections_list = []
      verse_number = '1'
      chapter_number = chapter['chapterNumber']
      chapter_contents = chapter['contents']

      for item in chapter_contents:

        if 'verseNumber' in item:
          verse_number = item['verseNumber']

        if 's1' in item:
          s1 = item['s1']
          sections_list.append(format_section(chapter_number, verse_number, s1))

        if 'rem' in item:
          rem = item['rem']
          sections_list.append(format_section(chapter_number, verse_number, rem))

        if 'contents' in item:
          for inner_item in item['contents']:
            if type(inner_item) == dict:

              if 's1' in inner_item:
                if sections_list == []:
                  sections_list.append('-')
                chapter_sections_list.append(sections_list)
                sections_list = []

                s1 = inner_item['s1']
                sections_list.append(format_section(chapter_number, verse_number, s1))

              if 'rem' in inner_item:
                rem = inner_item['rem']
                sections_list.append(format_section(chapter_number, verse_number, rem))

      if sections_list == []:
        sections_list.append('-')
      chapter_sections_list.append(sections_list)
    
    sections_mapping[book_code] = chapter_sections_list

  contents = section_headings_dart_file_template.format(str(sections_mapping))

  with open(oet_rv_section_headings_file, "w") as file:
    file.write(contents)

  return sections_mapping


def generate_start_end_mappings_file(sections_mapping):
  start_end_sections = {}
  for book in sections_mapping:
    book_sections = sections_mapping[book]
    list_length = len(book_sections)

    inner = {}
    for index in range(0, list_length):
      
      # Section start
      start = book_sections[index][0]
      start_section_ref = section_ref_from_section(start)
      start_chapter_ref, start_verse_ref = split_section_ref(start_section_ref)

      # Section end
      if index+1 < list_length:
        next_section = book_sections[index+1][0]
        # Check if the next section is still in the same chapter
        if (next_section.startswith(start_chapter_ref)):
          end = next_section
        else:
          end = start
      else:
        end = start

      end_section_ref = section_ref_from_section(end)
      end_chapter_ref, end_verse_ref = split_section_ref(end_section_ref)

      inner[start_section_ref] = {
        'start': {
          'chapter': int(start_chapter_ref),
          'verse': int(start_verse_ref),
        },
        'end': {
          'chapter': int(end_chapter_ref),
          'verse': int(end_verse_ref),
        }
      }

    start_end_sections[book] = inner

  contents = section_start_end_dart_file_template.format(str(start_end_sections))
  
  with open(oet_rv_section_start_end_file, "w") as file:
    file.write(contents)


def read_json_file(path):
  with open(path, "r") as json_file:
    data = json.load(json_file)

    return data
  

def format_section(chapterNumber, verseNumber, section):
  return (f'{chapterNumber}:{verseNumber} {section}').replace('/s1 ', '').replace('/s2 ', '').replace('/r ', '') # also /d ??


def section_ref_from_section(section):
  r = re.search(r'(\d*:\d*)', string=section)
  section_ref = r.group(0) if r else "0:0" # For cases where there isn't a match
  return section_ref


def split_section_ref(ref):
  a, b = ref.split(':')
  return [a, b]


if __name__ == "__main__":
  print("Generating files...")
  sections_mapping = generate_headings_mappings_file()
  generate_start_end_mappings_file(sections_mapping)
  print("Generating complete.")

